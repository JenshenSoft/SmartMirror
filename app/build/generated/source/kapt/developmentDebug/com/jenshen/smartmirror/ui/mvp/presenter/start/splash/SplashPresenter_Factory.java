// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.jenshen.smartmirror.ui.mvp.presenter.start.splash;

import com.jenshen.smartmirror.manager.firebase.auth.AuthManager;
import com.jenshen.smartmirror.manager.preference.PreferencesManager;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;

public final class SplashPresenter_Factory implements Factory<SplashPresenter> {
  private final MembersInjector<SplashPresenter> splashPresenterMembersInjector;

  private final Provider<PreferencesManager> arg0Provider;

  private final Provider<AuthManager> arg1Provider;

  public SplashPresenter_Factory(
      MembersInjector<SplashPresenter> splashPresenterMembersInjector,
      Provider<PreferencesManager> arg0Provider,
      Provider<AuthManager> arg1Provider) {
    assert splashPresenterMembersInjector != null;
    this.splashPresenterMembersInjector = splashPresenterMembersInjector;
    assert arg0Provider != null;
    this.arg0Provider = arg0Provider;
    assert arg1Provider != null;
    this.arg1Provider = arg1Provider;
  }

  @Override
  public SplashPresenter get() {
    return MembersInjectors.injectMembers(
        splashPresenterMembersInjector,
        new SplashPresenter(arg0Provider.get(), arg1Provider.get()));
  }

  public static Factory<SplashPresenter> create(
      MembersInjector<SplashPresenter> splashPresenterMembersInjector,
      Provider<PreferencesManager> arg0Provider,
      Provider<AuthManager> arg1Provider) {
    return new SplashPresenter_Factory(splashPresenterMembersInjector, arg0Provider, arg1Provider);
  }
}
